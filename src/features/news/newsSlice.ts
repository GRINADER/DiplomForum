import { IGetNews } from './../../models/news/index';
import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { getNews } from '../../api/news/index';
// import {getThemeBySectionId} from '../../api/forum/index'
//import { getNews } from './newsAPI';
import { newsType } from './types';

export interface newsState {
  isLoad: boolean;
  news: newsType;
  errMessage: string,
  status: 'idle' | 'loading' | 'failed';
}

const initialState: newsState = { //!!!ничего передавать не нужно, только лишь получить новости
  isLoad: false,
  news: {totalCount:0,
  posts: []},
  errMessage: '',
  status: 'idle',
};  
export type initialStateType = typeof initialState;
// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchGetNews = createAsyncThunk(
  'news/GetNews',
  async (dto: IGetNews) => {
    const response = await  getNews(dto);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const newsSlice = createSlice({
  name: 'news',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [fetchGetNews.pending.type]: (state: initialStateType)=>{
      state.isLoad = true;
    },
    [fetchGetNews.fulfilled.type]: (state: initialStateType, action)=>{
      state.isLoad = false;
      state.news = action.payload;
      console.log(action.payload);
    },
    [fetchGetNews.rejected.type]: (state: initialStateType, action)=>{
      state.isLoad = false;
      state.errMessage = action.errMessage;
  }
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(fetchGetNews.pending, (state) => {
  //       state.isLoad = true;
  //     })
  //     .addCase(fetchGetNews.fulfilled, (state, action) => {
  //       state.isLoad = false;
  //       state.news = action.payload;
  //       // state.value += action.payload;
  //     })
  //     .addCase(fetchGetNews.rejected, (state) => {
  //       state.isLoad = false;
  //     });
  },
});
console.log(20);
export const {} = newsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default newsSlice.reducer;
